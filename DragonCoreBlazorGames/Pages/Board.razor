
<div class="board">
    <div class="row">
        <Square Image="@images[0]" OnClick="() => Select(0)" />
        <Square Image="@images[1]" OnClick="() => Select(1)" />
        <Square Image="@images[2]" OnClick="() => Select(2)" />
        <Square Image="@images[3]" OnClick="() => Select(3)" />
    </div>
    <div class="row">
        <Square Image="@images[4]" OnClick="() => Select(4)" />
        <Square Image="@images[5]" OnClick="() => Select(5)" />
        <Square Image="@images[6]" OnClick="() => Select(6)" />
        <Square Image="@images[7]" OnClick="() => Select(7)" />
    </div>
    <div class="row">
        <Square Image="@images[8]" OnClick="() => Select(8)" />
        <Square Image="@images[9]" OnClick="() => Select(9)" />
        <Square Image="@images[10]" OnClick="() => Select(10)" />
        <Square Image="@images[11]" OnClick="() => Select(11)" />
    </div>
    <div class="row">
        <Square Image="@images[12]" OnClick="() => Select(12)" />
        <Square Image="@images[13]" OnClick="() => Select(13)" />
        <Square Image="@images[14]" OnClick="() => Select(14)" />
        <Square Image="@images[15]" OnClick="() => Select(15)" />
    </div>
    @*<div class="timer">
        Time: @timeElapsed
    </div>*@
</div>

@code {
    private string[] images = new string[]
    {
        "https://dummyimage.com/100x100/000/fff&text=A",
        "https://dummyimage.com/100x100/000/fff&text=A",
        "https://dummyimage.com/100x100/000/fff&text=B",
        "https://dummyimage.com/100x100/000/fff&text=B",
        "https://dummyimage.com/100x100/000/fff&text=C",
        "https://dummyimage.com/100x100/000/fff&text=C",
    "https://dummyimage.com/100x100/000/fff&text=C",
    "https://dummyimage.com/100x100/000/fff&text=D",
    "https://dummyimage.com/100x100/000/fff&text=D",
    "https://dummyimage.com/100x100/000/fff&text=E",
    "https://dummyimage.com/100x100/000/fff&text=E",
    "https://dummyimage.com/100x100/000/fff&text=F",
    "https://dummyimage.com/100x100/000/fff&text=F",
    "https://dummyimage.com/100x100/000/fff&text=G",
    "https://dummyimage.com/100x100/000/fff&text=G",
    "https://dummyimage.com/100x100/000/fff&text=H",
    "https://dummyimage.com/100x100/000/fff&text=H",
    };

    private string selectedImage;
    private int matches = 0;
    private int attempts = 0;
    private bool isBusy = false;
    //    private Stopwatch stopwatch = new Stopwatch();
    //    private int timeElapsed = 0;

    protected override void OnInitialized()
    {
        Shuffle(images);
        //        stopwatch.Start();
    }

    private async Task Select(int index)
    {
        if (isBusy || index < 0 || index >= images.Length)
        {
            return;
        }

        isBusy = true;
        attempts++;

        Square square = null;

        try
        {
            square = squares[index];
            square.Reset();
            //square.StateHasChanged();

            if (selectedImage == null)
            {
                selectedImage = images[index];
            }
            else if (selectedImage == images[index])
            {
                matches++;
                selectedImage = null;

                if (matches == 8)
                {
                    //stopwatch.Stop();
                    //timeElapsed = stopwatch.Elapsed.Seconds;
                }
            }
            else
            {
                await Task.Delay(1000);
                square.Reset();
                squares.First(s => s.Image == selectedImage).Reset();
                selectedImage = null;
            }
        }
        finally
        {
            isBusy = false;
        }
    }

    private void Shuffle(string[] array)
    {
        Random rng = new Random();
        int n = array.Length;

        while (n > 1)
        {
            n--;
            int k = rng.Next(n + 1);
            string value = array[k];
            array[k] = array[n];
            array[n] = value;
        }
    }

    private List<Square> squares = new List<Square>();

    private void AddSquare(Square square)
    {
        squares.Add(square);
    }

    private void RemoveSquare(Square square)
    {
        squares.Remove(square);
    }

}


