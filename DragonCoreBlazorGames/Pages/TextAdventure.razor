@page "/textadventure"
@using System.Text.RegularExpressions
@inject IJSRuntime JsRuntime

<h1>Text Adventure Game</h1>

<p>Enter a command to play:</p>

<div>
    <input type="text" @bind-value="InputValue" @bind-value:event="oninput" @onkeydown="OnKeyDown" />
</div>

<p>@output</p>

@code {
    private IJSRuntime _jsRuntime;

    [Parameter] public EventCallback<string> OnInput { get; set; }
    private string _inputValue = "";

    public string InputValue
    {
        get => _inputValue;
        set
        {
            _inputValue = value;
            OnInput.InvokeAsync(value);
        }
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            //await OnInput.InvokeAsync(InputValue);
            await ProcessInput();
            //InputValue = "";
        }
    }
    private string output = "";
    private int currentRoom = 1;
    private bool hasKey = false;

    private string[][] rooms = new string[][] {
        new string[] {"You are in the living room. There is a door to the north.", "north", null},
        new string[] {"You are in the kitchen. There is a door to the south and a key on the table.", "south", "north"},
        new string[] {"You are in the bedroom. There is a door to the east and a locked chest.", "east", "west"},
        new string[] {"You are in the bathroom. There is a door to the west.", "west", "east"},
        new string[] {"You are in the closet. There is a door to the south and a coat on the hanger.", "south", null},
        new string[] {"You are in the garage. There is a door to the north and a car.", "north", "south"}
    };

    private string[] items = new string[] {
        "key",
        "coat"
    };

    private string[] directions = new string[] {
        "north",
        "south",
        "east",
        "west"
    };

    private async Task ProcessInput()
    {
        string[] words = InputValue.Split(' ');

        if (words.Length == 1 && words[0] == "look")
        {
            output = rooms[currentRoom - 1][0];
            if (items.Contains(words[0]))
            {
                output += " You see a " + words[0] + ".";
            }
        }
        else if (words.Length == 2 && words[0] == "go" && directions.Contains(words[1]))
        {
            int nextRoom = GetNextRoom(words[1]);
            if (nextRoom == -1)
            {
                output = "You can't go that way.";
            }
            else
            {
                currentRoom = nextRoom;
                output = rooms[currentRoom - 1][0];
            }
        }
        else if (words.Length == 2 && words[0] == "take" && items.Contains(words[1]))
        {
            if (words[1] == "key")
            {
                hasKey = true;
            }
            output = "You take the " + words[1] + ".";
        }
        else if (words.Length == 2 && words[0] == "open" && words[1] == "chest" && currentRoom == 3 && hasKey)
        {
            output = "You open the chest and find a flashlight.";
        }
        else
        {
            output = "Invalid command.";
        }

        InputValue = "";
    }

    private int GetNextRoom(string direction)
    {
        int nextRoom = -1;

        for (int i = 0; i < rooms.Length; i++)
        {
            if (rooms[i][1] == direction && i + 1 != currentRoom)
            {
                nextRoom = i + 1;
                break;
            }
        }

        return nextRoom;
    }

    protected override void OnInitialized()
    {
        output = rooms[currentRoom - 1][0];

        InputValue = "";

        _jsRuntime = JsRuntime;

        base.OnInitialized();
    }

    protected override bool ShouldRender()
    {
        return true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var inputElement = await _jsRuntime.InvokeAsync<IJSObjectReference>("document.querySelector", new Object?[] { "input" });
            await inputElement.InvokeVoidAsync("focus");
        }
        await base.OnAfterRenderAsync(firstRender);
    }

}